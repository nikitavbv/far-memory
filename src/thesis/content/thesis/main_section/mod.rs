use {
    crate::thesis::engine::{Block, ImageBlock, subsection_header, paragraph, unordered_list, section_header, SubsectionHeaderBlock},
    self::research::research,
};

mod research;

pub fn main_section() -> Block {
    /* from https://ela.kpi.ua/bitstream/123456789/49978/1/Mahisterska_dysertatsiia.pdf:
        Перший розділ містить порівняльний аналіз актуального наукового,
        інноваційного та практичного світового та вітчизняного здобутку у чіткій
        відповідності до теми магістерської дисертації. Для з'ясування стану розробки
        обраної теми складається огляд літератури, з якого можна зробити висновок, що
        дана тема ще не розкрита (розкрита лише частково, або не в тому аспекті) і тому
        вимагає подальшого розроблення. Якщо такий висновок не випливає логічно з
        огляду, то дисертанту немає сенсу розробляти обрану тему.
        В огляді необхідно:
        − окреслити основні етапи розвитку наукової думки за обраною
        сформульованою задачею;
        − стисло, критично висвітлити роботи попередників (переваги та недоліки,
        порівняльний аналіз отриманих раніше результатів, огляд аналогів на ринку
        схожих рішень або продуктів).
        Огляд літератури за темою демонструє ґрунтовне ознайомлення
        дисертанта зі спеціальною літературою, його вміння систематизувати джерела,
        критично їх розглядати, виділяти суттєве, оцінювати зроблене раніше іншими
        дослідниками, визначати головне у сучасному стані вивчення теми. Матеріали
        такого огляду треба систематизувати в певному логічному зв'язку і
        послідовності. Тому перелік праць (не менше 20-ти) та їх критичний розгляд не
        обов'язково подавати у хронологічному порядку. При цьому слід пам'ятати, що
        оскільки дисертація розкриває відносно вузьку тему, то огляд праць
        попередників роблять тільки з питань обраної теми, а не за проблемою в цілому.
        В огляді називають і критично оцінюють публікації, прямо і безпосередньо
        причетні до теми дисертації. Зайвим є виклад всього, що стало відомим
        дисертанту з прочитаного, і того, що побічно стосується його праці.
        Результатом проведеного аналізу має бути визначення тих питань, що
        залишились невирішеними, а отже і конкретизація даного дослідження у
        розв’язанні вказаної проблеми (завдання), та формулювання існуючих недоліків
        і напрямів їх подальшого усунення та вирішення, що забезпечує актуальність
        магістерського дослідження. Загальний обсяг огляду літератури не повинен
        перевищувати 20 % обсягу основної частини магістерської дисертації. */

    Block::Multiple(vec![
        research(),

        section_header("Розробка методів надання віддаленої памʼяті"),
        Block::Placeholder(
            Box::new(Block::Multiple(vec![
                subsection_header("Компоненти системи"),
                paragraph("З урахуванням специфіки доменної області, вимог, що висуваються до програмного забезпечення та результатів попереднього аналізу проблеми було розроблено архітектуру, що складається з наступних компонентів:"),
                unordered_list(vec![
                    "Сервіс зберігання блоків памʼяті".to_owned(),
                    "Сервіс керування кластером віддаленої памʼяті".to_owned(),
                    "Клієнтська інтеграція".to_owned(),
                ]),
                paragraph("Центральна сутність, з якою працюють усі компоненти це блоки памʼяті."),
                paragraph("Усі компоненти програмного рішення віддаленої памʼяті розгортатимуться за допомогою бінарних виконуваних файлів призначених для операційної системи Linux, а також (за вибором користувача) з використанням Docker контейнерів, що можна розгорнути за допомогою сучасних систем оркестрації, як наприклад Kubernetes."),
                paragraph("Архітектура програмного рішення віддаленої памʼяті має наступні припущення щодо середовища, в якому вона буде розгортатися:"),
                unordered_list(vec![
                    "Вважається, що усі вузли системи розміщені у межах одного центру обробки даних та мають низькі мережеві затримки при спілкуванні між собою".to_owned(),
                    "Мережа працює стабільно і між будь-якими двома вузлами в кластері є можливість встановити зʼєднання. Оскільки в багатьох інших задачах існує таке саме припущення (наприклад, у розподілених базах даних) і враховуючи той факт, що у межах одного центру обробки даних мережа зазвичай достатньо стабільна, то використання цього припущення не повинно накладати значних обмежень на середовища, в яких це програмне рішення може використатися".to_owned(),
                    "Будь-яка розгорнута клієнтська інтеграція має можливість підключитися до сервісу керування кластером за призначеною йому IP адресою в мережі та номером порту".to_owned(),
                    "Будь-яка розгорнута клієнтська інтеграція, а також сервіс керування кластером мають можливість підключитись до будь-якого розгорнутого сервісу зберігання блоків за призначеними їм IP адресами в мережі та номером порту".to_owned(),
                    "Будь-який розгорнутий сервіс зберігання блоків даних має можливість відкрити зʼєднання з сервісом керування кластером за призначеною йому IP адресою в мережі та номером порту".to_owned(),
                    "Конфігурація усієї системи знаходиться та редагується користувачем в сервісі керування кластером віддаленої памʼяті. Для налаштування та додавання у кластер нової клієнтської інтеграції чи сервісу зберігання даних користувачу достатньо вказати IP адресу та порт сервісу керування кластером".to_owned(),
                    "Для реалізації усіх компонентів системи використовується мова програмування Rust".to_owned(),
                ]),
                subsection_header("Блоки памʼяті"),
                paragraph("Блоками памʼяті в цьому програмному рішенні є набором байт, які обробляються системою як єдина одиниця. Розмір блоку складає 4 мегабайти за замовчуванням або розмір вказаний користувачем при розгортанні системи. Як і в деяких існуючих реалізаціях, ціль використання блоків полягає в обʼєданні невеликих фрагментів памʼяті у більш великі блоки для більш швидкої та ефективної обробки, зниження затримки в операцій читання та запису."),
                paragraph("Кожному блоку памʼяті призначається унікальний ідентифікатор (ID), який є цілим числом, яке займає 64 біти памʼяті."),
                subsection_header("Cервіс зберігання блоків"),
                paragraph("Сервіс зберігання блоків - сервіс, що розгортається на вузлах розподіленої системи, що містять вільну памʼять для надання доступу до неї по мережі."),
                paragraph("Інтерфейсом цього компоненту є сховище ключ-значення, де ключем є ідентифікатор блоку памʼяті, а значенням - байти блоку."),
                subsection_header("Сервіс керування кластером"),
                paragraph("Сервіс керування кластером приймає від розгорнутих сервісів зберігання блоків інформацію про кількість блоків, яку вони можуть отримати для зберігання. Далі, за запитами від клієнтських інтеграцій, сервіс керування кластером призначає їм ідентифікатори блоків для використання в клієнтському програмному забезпеченні, а також адреси сервісів зберігання блоків, на яких вони розміщені."),
                paragraph("Для забезпечення відмовостійкості, користувач обирає один зі способів забезпечення відновлення даних у разі програмних чи апаратних збоїв:"),
                unordered_list(vec![
                    "Реплікація (за вказаним користувачем фактором n) - цей алгоритм створює n ідентичних копій даних на різних вузлах системи. У разі якщо один з вузлів вийде з кластеру, то дані будуть відновлені з інших вузлів, де зберігаються репліковані копії.".to_owned(),
                    "Кодування стиранням (erasure coding) - цей алгоритм ділить блоки даних на менші блоки, кожен з яких має надмірність (конфігурація алгоритму задається користувачем в залежності від його вимог до відмовостійкості кластеру). У разі відмови одного з вузлів кластеру, втрачену інформацію можна відновити з інших частин виконавши нескладні математичні перетворення.".to_owned(),
                ]),
                paragraph("Сервіс керування кластером також надає інструменти для моніторингу, перегляду стану компонентів та внесення змін в кластер. Надається веб-інтерфейс користувача для перегляду інформації. Для інтеграції з зовнішньою системою моніторинга надається HTTP інтерфейс для передачі метрик та статистики у форматі Prometheus."),
                paragraph("Крім цього, на сервісі керування кластером полягає роль автоматичної зміни конфігурації кластеру на основі статистики зібраної клієнтськими інтеграціями. Ці налаштування мають вид правил, які відправляються на клієнтські інтеграції та задають їм за яких умов необхідно виконати предзавантаження окремих блоків даних для зниження часу затримки."),
                subsection_header("Клієнтська інтеграція"),
                paragraph("Як зазначалось раніше, клієнтська інтеграція має два варіанти для розгортання на вибір користувача (в кластері можно використовувати обидва одночасно)."),
                subsection_header("Бібліотека на мові програмування Rust для інтеграції в клієнтське програмне забезпечення"),
                paragraph("Цей спосіб використання підходить для програмного забезпечення, код якого є можливість змінити та яке написане на мові програмування Rust. Ця інтеграція є рекомендованою для використання, оскільки більш ефективна в роботі та має більш низькі затримки."),
                paragraph("Для її використання, користувач додає в своє програмне забезпечення бібліотеку, яка надає йому наступні інструменти для використання в своєму коді:"),
                unordered_list(vec![
                    "Розумний показчик FarMemory<T>, який за допомогою механізмів Deref<T> та Drop<T>, наданих мовою програмування Rust, завантажує дані та відправляє до віддаленою памʼяті за необхідністю.".to_owned(),
                    "Структура даних FarMemoryList<T> яка реалізує інтерфейс списку та зберігає дані у віддаленій памʼяті".to_owned(),
                    "Структура даних FarMemoryTable<K, V> яке реалізує інтерфейс хеш-таблиці та зберігає дані у віддаленій памʼяті".to_owned(),
                    "Функцію allocate_far_memory_block, яка резервує блок у віддаленій памʼяті та повертає його ідентифікатор. Ця функція призначена для випадків коли розробнику потрібен низькорівневий доступ до памʼяті".to_owned(),
                    "Функції read_far_memory_block та write_far_memory_block що дозволяють прочитати та записати зміст блоку у віддаленій памʼяті за його ідентифікатором. Ці функція призначена для випадків коли розробнику потрібен низькорівневий доступ до памʼяті".to_owned(),
                    "Функція free_far_memory_block, що визволяє з використання блок памʼяті за його ідентифікатором. Ця функція призначена для випадків коли розробнику потрібен низькорівневий доступ до памʼяті".to_owned(),
                ]),
                subsection_header("Сервіс клієнтської інтеграції"),
                paragraph("Цей варіант використання призначено для випадків, коли немає можливості змінити програмний код клієнтського програмного забезпечення, або коли воно використовує інші мови програмування, що не дозволяє використати бібліотеку клієнтської інтеграції."),

                paragraph("Цей спосіб полягає в розгортанні сервісу на тому ж обладнанні, яке виконує програмне клієнтське програмне забезпечення. Сервіс використовує відповідний функціонал операційної системи Linux для створення віртуального блокового пристрою. Далі цей блоковий пристрій використовується клієнтським забезпеченням для прямого зберігання даних (за необхідністю, на блоковому пристрою розміщується файлова система) або на блоковому пристрою розміщується файл підкачки, в який операційна система при низькому рівні вільної памʼяті, автоматично переносить сторінки памʼяті."),
                subsection_header("Взаємодія компонентів"),
                paragraph("Для комунікації між компонентами використовується TCP/IP зʼєднання. Для кодування повідомлень має сенс використати Protocol Buffers. Це дозволить пересилати дані між компонентами з низькими затримками та додатковими витратами."),
                Block::Image(ImageBlock::new("images/image2.jpg".to_owned(), "Схема компонентів кластеру та потоки даних між ними".to_owned())),
            ])),
            "improve description of far memory method".to_owned(),
        ),

        Block::SubsectionHeader(SubsectionHeaderBlock::without_numbering("Висновки до розділу".to_owned())),
        Block::Placeholder(
            Box::new(paragraph("В цьому розділі було формалізовано вимоги до програмного рішення, що розглядається в межах цієї роботи. Грунтуючись на цих вимогах, було розроблено архітектуру програмно визначеної віддаленої памʼяті призначеної для розгортання у сучасних розподілених системах. Ця архітектура та описані деталі її реалізації будуть в подальшому використовуватись при реалізації, тестуванні та впровадженні цього програмного рішення.")),
            "improve conclusions".to_owned(),
        ),

        section_header("Опис програмного та технічного забезпечення"),
        Block::Placeholder(Box::new(paragraph("some text here")), "add some text here".to_owned()),

        section_header("Маркетинговий аналіз стартап-проекту"),
        Block::Placeholder(Box::new(paragraph("some text here")), "add some text here".to_owned()),
    ])
}
