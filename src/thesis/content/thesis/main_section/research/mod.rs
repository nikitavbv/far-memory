use {
    crate::thesis::{
        content::{thesis_tasks, Language},
        engine::{Block, ImageBlock, subsection_header, paragraph, unordered_list, section_header, SubsectionHeaderBlock, Reference, reference, TableBlock, TableCell, Alignment}
    },
    self::{
        aifm::aifm,
        carbink::carbink,
        far_memory_in_warehouse_scale::far_memory_in_warehouse_scale,
        hydra::hydra,
        rdma::rdma,
    }
};

mod aifm;
mod carbink;
mod far_memory_in_warehouse_scale;
mod hydra;
mod rdma;

pub fn research() -> Block {
    /* from https://ela.kpi.ua/bitstream/123456789/49978/1/Mahisterska_dysertatsiia.pdf:
        Перший розділ містить порівняльний аналіз актуального наукового,
        інноваційного та практичного світового та вітчизняного здобутку у чіткій
        відповідності до теми магістерської дисертації. Для з'ясування стану розробки
        обраної теми складається огляд літератури, з якого можна зробити висновок, що
        дана тема ще не розкрита (розкрита лише частково, або не в тому аспекті) і тому
        вимагає подальшого розроблення. Якщо такий висновок не випливає логічно з
        огляду, то дисертанту немає сенсу розробляти обрану тему.
        В огляді необхідно:
        − окреслити основні етапи розвитку наукової думки за обраною
        сформульованою задачею;
        − стисло, критично висвітлити роботи попередників (переваги та недоліки,
        порівняльний аналіз отриманих раніше результатів, огляд аналогів на ринку
        схожих рішень або продуктів).
        Огляд літератури за темою демонструє ґрунтовне ознайомлення
        дисертанта зі спеціальною літературою, його вміння систематизувати джерела,
        критично їх розглядати, виділяти суттєве, оцінювати зроблене раніше іншими
        дослідниками, визначати головне у сучасному стані вивчення теми. Матеріали
        такого огляду треба систематизувати в певному логічному зв'язку і
        послідовності. Тому перелік праць (не менше 20-ти) та їх критичний розгляд не
        обов'язково подавати у хронологічному порядку. При цьому слід пам'ятати, що
        оскільки дисертація розкриває відносно вузьку тему, то огляд праць
        попередників роблять тільки з питань обраної теми, а не за проблемою в цілому.
        В огляді називають і критично оцінюють публікації, прямо і безпосередньо
        причетні до теми дисертації. Зайвим є виклад всього, що стало відомим
        дисертанту з прочитаного, і того, що побічно стосується його праці.
        Результатом проведеного аналізу має бути визначення тих питань, що
        залишились невирішеними, а отже і конкретизація даного дослідження у
        розв’язанні вказаної проблеми (завдання), та формулювання існуючих недоліків
        і напрямів їх подальшого усунення та вирішення, що забезпечує актуальність
        магістерського дослідження. Загальний обсяг огляду літератури не повинен
        перевищувати 20 % обсягу основної частини магістерської дисертації. */

    Block::Multiple(vec![
        section_header("Огляд існуючих методів надання віддаленої памʼяті"),
        subsection_header("Ресурси обладнання у розподілених системах та проблема їх ефективного використання"),
        paragraph("Будь-який сучасний центр обробки даних складається з великої кількості серверного та мережевого обладнання. На цьому обладнанні виконується програмне забезпечення, що обробляє запити від користувачів та \
може бути частинами розподілених систем.".to_owned()),
        paragraph("Під час своєї роботи на цьому обладнанні, програмне забезпечення може використовувати наступні його ресурси:".to_owned()),
        Block::UnorderedList(vec![
            "процесорний час".to_owned(),
            "оперативна памʼять".to_owned(),
            "постійна памʼять на різних типах сховища, таких як жорсткі диски, твердотільні накопичувачі на ін.".to_owned(),
            "спеціалізовані пристрої, такі як графічні прискорювачі".to_owned(),
        ]),
        paragraph("Для кожного з цих ресурсів існує проблема їх ефективного використання та різні рішення для досягнення такої мети.".to_owned()),
        paragraph(vec![
            "Один з методів який дозволяє підвищити ефективність використання ресурсів процесору є ".into(),
            reference("“надмінна підписка” (oversubscription)".to_owned(), Reference::for_publication("Towards an understanding of oversubscription in cloud", "Salman A. Baset, Long Wang, Chunqiang Tang", 2012, "Proceedings of the 2nd USENIX Conference on Hot Topics in Management of Internet, Cloud, and Enterprise Networks and Services")),
            " його обчислювального часу. Це означає що на одному процесорі запускається декілька різних \
програм або віртуальних машин, кожна з яких використовує його частину часу, а разом всі - використовують процесор майже весь час, при цьому розрахунок йде на те, що піки завантаженості цих програм не збігаються.".into(),
        ]),
        paragraph(vec![
            "Через особливості того, як програмне забезпечення працює з оперативною памʼяттю, вона є найбільш складним ресурсом, ефективність використання якого можна було б підвищити. Одним з підходів, що останнім часом багато \
досліджується та розглядається операторами великих центрів обробки даних для інтеграції є ".into(),
            reference("віддалена памʼять (Far Memory)".to_owned(), Reference::for_publication("Can far memory improve job throughput?", "Amaro, E., Branner-Augmon C., Luo Z., Ousterhout A., Aguilera M. K., Panda A., Ratnasamy S., & Shenker S. J.", 2020, "EuroSys '20: Proceedings of the Fifteenth European Conference on Computer Systems")),
            ".".into(),
        ]),
        paragraph("Суть цього методу полягає в тому, що сервери у центрі обробки даних (і програмне забезпечення, що на них розгорнуте) можна поділити на два типи:".to_owned()),
        Block::UnorderedList(vec![
            "сервери, на яких більша частина памʼяті є вільною".to_owned(),
            "сервери, які могли б цю памʼять використовувати, якщо мали би до неї доступ".to_owned(),
        ]),
        paragraph(vec![
            "Програмне забезпечення першого типу зазвичай має “вузьке місце” у ресурсах процесору (наприклад, виконує задачі кодування даних, або простого обміну даними), програмне забезпечення другого - у ресурсах памʼяті \
(зазвичай це аналіз великих масивів даних або просто у програмного забезпечення є деякий великий набір даних, який йому потрібен для роботи). Використання памʼяті диску для розширення основної памʼяті не є оптимальним - через великий час доступу (\
а в хмарній інфраструктурі в додаток до цього зазвичай диски не є локальними, а ".into(),
            reference("розміщені віддалено на окремій інфраструктурі", Reference::for_publication("Flash Storage Disaggregation", "Ana Klimovic, Christos Kozyrakis, Eno Thereska, Binu John, Sanjeev Kumar", 2016, "Proceedings of the 11th European Conference on Computer Systems (EuroSys)")),
"). У порівнянні з часом доступу до диску час доступу до даних у памʼяті іншого серверу є ".into(),
            reference("значно меншим", Reference::for_publication("It's s Time for Low Latency", "Stephen M. Rumble, Diego Ongaro, Ryan Stutsman, Mendel Rosenblum, John K. Ousterhout", 2011, "13th Workshop on Hot Topics in Operating Systems (HotOS XIII)")),
            " (хоча все ще більшим за той випадок, коли дані доступні локально).".into(),
        ]),
        paragraph("На рисунку 1.1 схематично показано принцип роботи віддаленої памʼяті при навявності серверів з різним рівнем використання оперативної памʼяті."),
        Block::Image(ImageBlock::new("images/image1.jpg".to_owned(), "Схематичне зображення принципу роботи віддаленої памʼяті".to_owned())),
        paragraph("Це все робить використання такої віддаленої памʼяті привабливим для випадків, коли можна знайти сторінки памʼяті, доступ до яких відбувається порівняно не часто, перемістити їх у віддалену памʼять та звільнити місце для даних, доступ до яких відбувається частіше.".to_owned()),

        subsection_header("Огляд існуючих реалізацій віддаленої памʼяті"),
        paragraph("Існуючі методи надання віддаленої памʼяті можна проаналізувати у контексті критеріїв, що впливають на область застосування такої системи та розглядаються у межах цієї роботи."),
        paragraph(vec![
            "Важливою характеристикою цього класу памʼяті є залежність від спеціалізованого апаратного та програмного забезпечення у середовищі, де вона розгортається. Хоча використання таких компонентів (наприклад, мережевих карт з підтримкою технологій прямого доступу до памʼяті віддалених вузлів) дозволяє значно знизити затримку доступу до даних, воно також значно звужує область застосування на практиці, або робить використання ".into(),
            reference("недоцільним", Reference::for_publication("Datacenter Ethernet and RDMA: Issues at Hyperscale", "Torsten Hoefler, Duncan Roweth, Keith Underwood, Bob Alverson, Mark Griswold, Vahid Tabatabaee, Mohan Kalkunte, Surendra Anubolu, Siyuan Shen, Abdul Kabbani, Moray McLaren, Steve Scott", 2023, "IEEE Computer")),
            " чи неможливим.".into()
        ]),
        paragraph(vec![
            "Іншим важливим аспектом є метод інтеграції у програмне забезпечення. Це є складною задачею, оскільки доступ до даних у віддаленій памʼяті повинен бути прозорим та схожим на роботу з даними у локальній памʼяті, не вимагаючи значних змін у код програмного забезпечення. В іншому випадку, це робить використання віддаленої памʼяті менш привабливим за зберігання даних у віддалених базах даних чи використання інструментів для розподіленої обробки даних, таких як ".into(),
            reference("Spark", Reference::for_website("Apache Spark", "https://spark.apache.org/")),
            ".".into(),
        ]),
        paragraph("На можливість застосування віддаленої памʼяті також впливає швидкість доступу до даних, що забезпечується реалізацією. Чим більшим є негативний вплив на швидкодію, тим менше область застосування (наприклад, програмне забезпечення що виконує фонову обробку даних є менш чутливим до затримок, а програмне забезпечення що обробляє запити користувача у інтерактивному режимі є більш чутливим). Зниження затримки може забезпечуватись через оптимізацію реалізації переміщення даних, а також завдяки прогнозуванню доступу до даних, та завчасному переміщенню у локальну памʼять."),
        paragraph("Оскільки зберігання даних на інших вузлах робить систему менш відмовостійкою, то важливим є те, як реалізація віддаленої памʼяті знижує ризик втрати даних і який рівень надлишковості та додаткового використання ресурсів є необхідним для цього."),

        // if I will need more, I can take a look at Infiniswap
        rdma(),
        hydra(),
        aifm(),
        carbink(),
        far_memory_in_warehouse_scale(),

        subsection_header("Порівняння існуючих рішень"),
        paragraph("У таблиці 1.1 наведено порівняння основних властивостей існуючих рішень, що було розглянуто."),
        Block::Table(TableBlock::new(
            vec![
                TableCell::new("".into()),
                TableCell::new("Carbink".into()),
                TableCell::new("AIFM".into()),
                TableCell::new("Hydra".into()),
                TableCell::new("Software-Defined Far Memory in Warehouse-Scale Computers".into()),
            ],
            vec![
                vec![
                    TableCell::new("Відкритий вихідний код та доступність для зовнішнього використання".into()),
                    TableCell::new("-".into()).alignment(Alignment::Center),
                    TableCell::new("+".into()).alignment(Alignment::Center),
                    TableCell::new("+".into()).alignment(Alignment::Center),
                    TableCell::new("-".into()).alignment(Alignment::Center),
                ],
                vec![
                    TableCell::new("Не залежить від спеціалізованого апаратного забезпечення".into()),
                    TableCell::new("+".into()).alignment(Alignment::Center),
                    TableCell::new("RDMA NIC".into()).alignment(Alignment::Center),
                    TableCell::new("RDMA NIC".into()).alignment(Alignment::Center),
                    TableCell::new("+".into()).alignment(Alignment::Center),
                ],
                vec![
                    TableCell::new("Зберігання даних на багатьох віддалених вузлах".into()),
                    TableCell::new("+".into()).alignment(Alignment::Center),
                    TableCell::new("-".into()).alignment(Alignment::Center),
                    TableCell::new("+".into()).alignment(Alignment::Center),
                    TableCell::new("-".into()).alignment(Alignment::Center),
                ],
                vec![
                    TableCell::new("Підтримка інтеграції без зміни коду".into()),
                    TableCell::new("-".into()).alignment(Alignment::Center),
                    TableCell::new("-".into()).alignment(Alignment::Center),
                    TableCell::new("+".into()).alignment(Alignment::Center),
                    TableCell::new("+".into()).alignment(Alignment::Center),
                ],
                vec![
                    TableCell::new("Зниження затримки за рахунок керування заміщенням сторінок".into()),
                    TableCell::new("прості евристики".into()).alignment(Alignment::Center),
                    TableCell::new("prefetching".into()).alignment(Alignment::Center),
                    TableCell::new("прості евристики".into()).alignment(Alignment::Center),
                    TableCell::new("адаптація гіперпараметрів механізму підкачки".into()).alignment(Alignment::Center),
                ],
            ],
            "Порівняльна таблиця існуючих методів надання віддаленої памʼяті".to_owned(),
        )),

        subsection_header("Постановка задачі"),
        paragraph("Метою роботи є покращення програмних засобів та методів, що можуть використовуватись операторами центрів обробки даних та розробниками програмного \
забезпечення для розгортання та використання віддаленої памʼяті. Для досягнення мети необхідно вирішити наступні задачі:"),
        unordered_list(thesis_tasks().into_iter().map(|v| v.for_language(&Language::Ukrainian)).collect()),
        paragraph("Створене програмне забезпечення повинно відповідати наступним вимогам:"),
        unordered_list(vec![
            "реалізація віддаленої памяʼті повинна містити компонент, який користувачі системи можуть розгорнути на вузлах системи (під управлінням операційної системи Linux)\
, що мають вільну памʼять для її використання по мережі. Цей компонент повинен використовувати невелику кількість ресурсів, та для зберігання даних використовувати кількість \
памʼяті задану користувачем або визначену автоматично".to_owned(),
            "реалізація повинна мати варіанти інтеграції як в нове програмне забезпечення (де є можливість змінювати програмний код) так і в існуюче (де змінювати код не є \
можливим)".to_owned(),
            "показники швидкодії віддаленої памʼяті в операціях читання та запису повинні бути кращими за типові показники при роботі з даними у постійному сховищі (\
наприклад, жорсткі диски та твердотільні накопичувачі), що зазвичай використовуються у середовищах з дезагрегованими ресурсами.".to_owned(),
            "наявність центрального компоненту, який налаштовує конфігурацію та дозволяє керувати усією системою".to_owned(),
            "реалізація повинна мати автоматичну зміну параметрів з урахуванням особливостей програмного забезпечення, що використовується.".to_owned(),
            "повинна забезпечуватись відмовостійкість та збереження даних що зберігаються у разі апаратних чи програмних збоїв у кластері".to_owned(),
            "програмне забезпечення повинне бути простим у розгортанні, адмініструванні а також у інтеграції в клієнтське програмне забезпечення".to_owned(),
        ]),
        paragraph("Призначенням цієї розробки є надання програмних засобів для розгортання віддаленої памʼяті та інструментів для її використання в існуючому та новому \
програмному забезпеченні."),

        Block::SubsectionHeader(SubsectionHeaderBlock::without_numbering("Висновки до розділу".to_owned())),
        paragraph("У цьому розділі розглянуто проблему надання віддаленої памʼяті у розподілених системах та виконано аналіз існуючих реалізацій. Визначено які підходи \
використовуються для інтеграції віддаленої памʼяті у нове та існуюче програмне забезпечення, зниження затримки доступу та забезпечення відмовостійкості. Розглянуто переваги \
та недоліки існуючих реалізацій."),
        paragraph("За результатами розгляду існуючих реалізацій, можна зробити висновок що Carbink та AIFM є найбільш підходящими для використання на практиці, але вони, як \
і інші реалізації мають певні обмеження. З цього випливає потреба у розробці нової реалізації, яка б була розвитком цих реалізацій, при цьому б не залежала б від \
спеціалізованого апаратного та програмного забезпечення, підтримувала б оптимізацію параметрів роботи для підвищення ефективності, мала б відкритий програмний код, тим самим \
усуваючи недоліки існуючих рішень."),
        paragraph("В результаті проведеного аналізу сформульована постановка задачі, наведене призначення, цілі та задачі розробки."),
    ])
}
